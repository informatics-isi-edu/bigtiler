<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://camel.apache.org/schema/spring
http://camel.apache.org/schema/spring/camel-spring.xsd">
  <bean id="properties"
    class="org.apache.camel.component.properties.PropertiesComponent">
    <property name="locations">
      <value>classpath:image-conversion.properties</value>
    </property>
  </bean>
  <bean id="supportedImageFileFilter" class="edu.isi.misd.image.gateway.conversion.spring.ImageSourceFileFilter">
    <property name="exclude">
      <set>
        <value>csv</value>
        <value>ets</value>
        <value>txt</value>
        <value>xml</value>
      </set>
    </property>
  </bean>
  <bean id="executor" class="java.util.concurrent.Executors" factory-method="newFixedThreadPool">
    <constructor-arg index="0" value="20"/>
  </bean>
  <bean id="convertImageToZoomifyTiles" class="edu.isi.misd.image.gateway.conversion.camel.WriteZoomifyTilesProcessor"/>
  <bean id="writeImageThumbnail" class="edu.isi.misd.image.gateway.conversion.camel.WriteImageThumbnailProcessor"/>
  
  <bean id="imageResize" class="edu.isi.misd.image.gateway.conversion.camel.ImageResizeProcessor">
    <constructor-arg><value type="java.lang.Integer">120</value></constructor-arg>
    <constructor-arg><value type="java.lang.Integer">120</value></constructor-arg>
  </bean>
  <bean id="getImageRelevantFiles" class="edu.isi.misd.image.gateway.conversion.camel.GetImageRelevantFilesProcessor"/>
  <bean id="fileListSplit" class="edu.isi.misd.image.gateway.conversion.camel.FileListSplitProcessor"/>
  <bean id="deleteFile" class="edu.isi.misd.image.gateway.conversion.camel.DeleteFileProcessor"/>
  <bean id="convertImageAnnotationToZoomify" class="edu.isi.misd.image.gateway.conversion.camel.WriteZoomifyAnnotationProcessor"/>
  <camelContext xmlns="http://camel.apache.org/schema/spring">
    <route id="upload">
      <from uri="file:{{staging.directory}}?filter=#supportedImageFileFilter&amp;delete=true&amp;idempotent=true&amp;delay=1000"/>
      <log message="Processing image ${file:name}"/>
      <multicast>
        <pipeline>
          <multicast parallelProcessing="true" executorServiceRef="executor">
            <to uri="direct:thumbnail"/>
            <to uri="direct:publish"/>
            <to uri="direct:tile"/>
            <to uri="direct:annotation"/>
          </multicast>
        </pipeline>
        <to uri="direct:cleanup"/>
      </multicast>
    </route>
    
    <route id="thumbnail">
      <from uri="direct:thumbnail"/>
      <pipeline>
        <log message="Writing thumbnail for image ${file:name}"/>
        <process ref="writeImageThumbnail"/>
        <process ref="imageResize"/>
        <to uri="file:{{published.thumbs}}?fileName=${file:onlyname.noext}.jpg&amp;fileExist=Fail"/>
      </pipeline>
    </route>
    
    <route id="stage">
      <from uri="direct:publish"/>
      <pipeline>
        <log message="Publishing image ${file:name}"/>
        <process ref="getImageRelevantFiles"/>
        <split stopOnException="true" onPrepareRef="fileListSplit">
          <simple>${body}</simple>
          <to uri="file:{{published.images}}?fileExist=Fail"/>
        </split>
      </pipeline>
    </route>

    <route id="tile">
      <from uri="direct:tile"/>
      <setHeader headerName="tileDirectory">
        <simple>${properties:published.tiles}/${file:onlyname.noext}</simple>
      </setHeader>
      <process ref="convertImageToZoomifyTiles"/>
    </route>

    <route id="annotation">
      <from uri="direct:annotation"/>
      <pipeline>
        <log message="Converting image annotation for ${file:name}"/>
        <process ref="convertImageAnnotationToZoomify"/>
        <to uri="file:{{published.images}}?fileName=${file:onlyname.noext}_zoomify.xml&amp;fileExist=Fail"/>
      </pipeline>
    </route>

    <route id="cleanup">
      <from uri="direct:cleanup"/>
      <log message="Cleaning up images for ${file:name}"/>
      <process ref="getImageRelevantFiles"/>
      <split stopOnException="true" onPrepareRef="fileListSplit">
        <simple>${body}</simple>
        <process ref="deleteFile"/>
      </split>
    </route>
  </camelContext>
</beans>